////MEMOISATION /////////////////////////////////////////////////////

class Solution{
    public:
    int f(int ind1,int ind2,string s1, string s2, int n, int m,vector<vector<int>>&dp){
        if(ind1>=n || ind2>=m)return 0;
        if(dp[ind1][ind2]!=-1)return dp[ind1][ind2];
        if(s1[ind1]==s2[ind2]){
            return dp[ind1][ind2]=1+f(ind1+1,ind2+1,s1,s2,n,m,dp);
        }
        return dp[ind1][ind2]=0;
    }
    int longestCommonSubstr (string s1, string s2, int n, int m)
    {
        vector<vector<int>>dp(n,vector<int>(m,-1));
        int ans=0;
        for(int i=n-1;i>=0;i--){
            for(int j=m-1;j>=0;j--){
                ans=max(ans,f(i,j,s1,s2,n,m,dp));
            }
        }
        return ans;
    }
};


/////////////TABULATION //////////////////////////////////////////////////////

class Solution{
    public:
    
    int longestCommonSubstr (string text1, string text2, int n, int m)
    {
         vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        dp[n-1][m-1]=(text1[n-1]==text2[m-1])?1:0;
        int ans=0;
        for(int ind1=n-1;ind1>=0;ind1--){
            for(int ind2=m-1;ind2>=0;ind2--){
              if(ind1==n-1 && ind2==m-1)continue;
              if(text1[ind1]==text2[ind2])dp[ind1][ind2]=1+dp[ind1+1][ind2+1];
              else dp[ind1][ind2]=0;
              ans=max(ans,dp[ind1][ind2]);
            }
        }
        return ans;
    }
};
