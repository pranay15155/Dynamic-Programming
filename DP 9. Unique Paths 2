//MEMOIZATION ****************************************************************************************************

class Solution {
public:
  int f(int row,int col,vector<vector<int>>&dp,vector<vector<int>>& grid){
        int m=grid.size(),n=grid[0].size();
        if(row>=m || col>=n || grid[row][col]==1)return 0;
        if(row==m-1 && col==n-1)return 1;
        if(dp[row][col]!=-1)return dp[row][col];
        return dp[row][col]=f(row+1,col,dp,grid)+f(row,col+1,dp,grid);
    }
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int m=grid.size(),n=grid[0].size();
        vector<vector<int>>dp(m,vector<int>(n,-1));
        return f(0,0,dp,grid);
    }
};

//TABULATION  METHOD 1 ******************************************************************************************


class Solution {
public:

    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int m=grid.size(),n=grid[0].size();
        vector<vector<long long int>>dp(m,vector<long long int>(n,0));
        if(grid[m-1][n-1]==0)dp[m-1][n-1]=1;
        //the values in elements in last row and last column are decided first
        for(int row=m-2;row>=0;row--){
            if(dp[row+1][n-1]==1 && grid[row][n-1]==0)dp[row][n-1]=1;
        }
        for(int col=n-2;col>=0;col--){
           if(dp[m-1][col+1]==1 && grid[m-1][col]==0)dp[m-1][col]=1;
        }
        for(int row=0;row<m;row++){
            for(int col=0;col<n;col++){
                if(grid[row][col]==1)dp[row][col]=0;
            }
        }
        for(int row=m-2;row>=0;row--){
            for(int col=n-2;col>=0;col--){
            if(grid[row][col]==0){
                dp[row][col]=dp[row+1][col]+dp[row][col+1];
                }
            }
        }
        return dp[0][0];

    }
};

//TABULATION  METHOD 2 ******************************************************************************************



class Solution {
public:
       int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int m=grid.size(),n=grid[0].size();
        vector<vector<long long int>>dp(m,vector<long long int>(n,0));
        for(int row=m-1;row>=0;row--){
            for(int col=n-1;col>=0;col--){
            if(grid[row][col]==1){dp[row][col]=0;continue;}
            if(row==m-1 && col==n-1 && grid[m-1][n-1]==0){dp[m-1][n-1]=1;continue;}
            long long int down=0,right=0;
            if(row<m-1)down=dp[row+1][col];
            if(col<n-1)right=dp[row][col+1];
            dp[row][col]=down+right;
            }
        }
        return dp[0][0];

    }
};

//SPACE OPTIMIZATION ******************************************************************************************


class Solution {
public:
       int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int m=grid.size(),n=grid[0].size();
        vector<long long int>prev(n,0);
        for(int row=m-1;row>=0;row--){
            vector<long long int>curr(n,0);
            for(int col=n-1;col>=0;col--){
            if(grid[row][col]==1){curr[col]=0;continue;}
            if(row==m-1 && col==n-1 && grid[m-1][n-1]==0){curr[n-1]=1;continue;}
            long long int down=0,right=0;
            if(row<m-1)down=prev[col];
            if(col<n-1)right=curr[col+1];
            curr[col]=down+right;
            }
            prev=curr;
        }
        return prev[0];

    }
};
