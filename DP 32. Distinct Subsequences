//MEMOISATION ///////////////////////////////////////////////////////////////////

class Solution {
public:
int n,m;
    int f(int ind1,int ind2,string &s1,string &s2,vector<vector<int>>&dp){
        if(ind1>=n)return 0;
        if(ind2>=m)return 1;
        if(ind1==n-1 && ind2==m-1){
            return s1[ind1]==s2[ind2]?1:0;
        }
        if(dp[ind1][ind2]!=-1)return dp[ind1][ind2];
        if(s1[ind1]==s2[ind2]){
            return dp[ind1][ind2]=f(ind1+1,ind2+1,s1,s2,dp)+f(ind1+1,ind2,s1,s2,dp);
        }
        return dp[ind1][ind2]=f(ind1+1,ind2,s1,s2,dp);
    }
    int numDistinct(string s, string t) {
         n=s.size(),m=t.size();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return f(0,0,s,t,dp);
    }
};


//TABULATION ////////////////////////////////////////////////////////////////////

class Solution {
public:
int n,m;
    int mod=1e9+7;
    int numDistinct(string s, string t) {
         n=s.size(),m=t.size();
        vector<vector<long long>>dp(n+1,vector<long long>(m+1,0));
        for(int ind1=n-1;ind1>=0;ind1--){
            dp[ind1][m]=1;
            for(int ind2=m-1;ind2>=0;ind2--){
                if(ind2==m-1 && ind1==n-1){
                    if(t[ind2]==s[ind1])dp[ind1][ind2]=1;
                    continue;
                }
                if(s[ind1]==t[ind2]){
                    dp[ind1][ind2]=(dp[ind1+1][ind2+1]+dp[ind1+1][ind2])%mod;
                }
                else dp[ind1][ind2]=dp[ind1+1][ind2];
            }
        }
        return dp[0][0];
    }
};

//SPACE-OPTIMIZATION ///////////////////////////////////////////////////


class Solution {
public:
int n,m;
    int mod=1e9+7;
    int numDistinct(string s, string t) {
         n=s.size(),m=t.size();
        vector<long long>prev(m+1,0);
        for(int ind1=n-1;ind1>=0;ind1--){
            vector<long long>curr(m+1,0);
            curr[m]=1;
            for(int ind2=m-1;ind2>=0;ind2--){
                if(ind2==m-1 && ind1==n-1){
                    if(t[ind2]==s[ind1])curr[ind2]=1;
                    continue;
                }
                if(s[ind1]==t[ind2]){
                    curr[ind2]=(prev[ind2+1]+prev[ind2])%mod;
                }
                else curr[ind2]=prev[ind2];
            }prev=curr;
        }
        return prev[0];
    }
};
