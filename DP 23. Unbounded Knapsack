//MEMOIZATION *********************************************************************

class Solution{
public:
 int f(int ind,int weight,int wt[],int val[],int n, vector<vector<int>>&dp){
        if(ind==n-1){
            if(weight>=wt[ind])return val[ind]*(weight/wt[ind]);
            return 0;
        }
        if(dp[ind][weight]!=-1)return dp[ind][weight];
        int take=(weight>=wt[ind])?val[ind]+f(ind,weight-wt[ind],wt,val,n,dp):0;
        int not_take=f(ind+1,weight,wt,val,n,dp);
        return dp[ind][weight]=max(take,not_take);
    }

    int knapSack(int N, int W, int val[], int wt[])
    {
      vector<vector<int>>dp(N,vector<int>(W+1,-1));
      return f(0,W,wt,val,N,dp);
    }
};

//TABULATION ************************************************************************

class Solution{
public:
    int knapSack(int N, int W, int val[], int wt[])
    {
      vector<vector<int>>dp(N,vector<int>(W+1,0));
      
      for(int wgt=0;wgt<=W;wgt++){
          dp[N-1][wgt]=(wgt/wt[N-1])*val[N-1];
      }
      for(int ind=N-2;ind>=0;ind--){
          for(int wgt=0;wgt<=W;wgt++){
            int take=(wgt>=wt[ind])?val[ind]+dp[ind][wgt-wt[ind]]:0;
            int not_take=dp[ind+1][wgt];
            dp[ind][wgt]=max(take,not_take);
          }
      }
      return dp[0][W];
    }
};

//SPACE OPTIMIZATION **********************************************************************

class Solution{
public:
    int knapSack(int N, int W, int val[], int wt[])
    {
      vector<int>prev(W+1,0);
      
      for(int wgt=0;wgt<=W;wgt++){
          prev[wgt]=(wgt/wt[N-1])*val[N-1];
      }
      for(int ind=N-2;ind>=0;ind--){
          vector<int>curr(W+1,0);
          for(int wgt=0;wgt<=W;wgt++){
            int take=(wgt>=wt[ind])?val[ind]+curr[wgt-wt[ind]]:0;
            int not_take=prev[wgt];
            curr[wgt]=max(take,not_take);
          }
          prev=curr;
      }
      return prev[W];
    }
};


