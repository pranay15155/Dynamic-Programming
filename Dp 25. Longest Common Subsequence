//MEMOIZATION *************************************************************


class Solution {
public:
    int n,m;
    int longestCommonSubsequence(string text1, string text2) {
        n=text1.size();
        m=text2.size();
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        dp[n-1][m-1]=(text1[n-1]==text2[m-1])?1:0;
        for(int ind1=n-1;ind1>=0;ind1--){
            for(int ind2=m-1;ind2>=0;ind2--){
              int ans=0;
              if(ind1==n-1 && ind2==m-1)continue;
              if( text1[ind1]==text2[ind2])ans=1+dp[ind1+1][ind2+1];
              if(text1[ind1]!=text2[ind2]){
                if(ind1<n-1)ans=max(ans,dp[ind1+1][ind2]);
                if(ind2<m-1)ans=max(ans,dp[ind1][ind2+1]);
              }
            dp[ind1][ind2]=ans;
            }
        }
        return dp[0][0];
    }
};

//TABULATION *******************************************************************

class Solution {
public:
    int n,m;
    int longestCommonSubsequence(string text1, string text2) {
        n=text1.size();
        m=text2.size();
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        dp[n-1][m-1]=(text1[n-1]==text2[m-1])?1:0;
        for(int ind1=n-1;ind1>=0;ind1--){
            for(int ind2=m-1;ind2>=0;ind2--){
              int ans=0;
              if(ind1==n-1 && ind2==m-1)continue;
              if(text1[ind1]==text2[ind2])ans=1+dp[ind1+1][ind2+1];
              if(text1[ind1]!=text2[ind2]){
                if(ind1<n-1)ans=max(ans,dp[ind1+1][ind2]);
                if(ind2<m-1)ans=max(ans,dp[ind1][ind2+1]);
              }
            dp[ind1][ind2]=ans;
            }
        }
        return dp[0][0];
    }
};

//SPACE OPTIMIZATION *************************************************************

