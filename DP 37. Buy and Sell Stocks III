//MEMOISATION 

class Solution {
public:
    int n;
    int f(int ind,int buy ,int limit,vector<int>& prices,vector<vector<vector<int>>>&dp){
        if(ind>=n || limit>1)return 0;
        if(dp[ind][buy][limit]!=-1)return dp[ind][buy][limit];
        if(buy)return dp[ind][buy][limit]=max(-prices[ind]+f(ind+1,0,limit,prices,dp),f(ind+1,1,limit,prices,dp));
        return dp[ind][buy][limit]=max(prices[ind]+f(ind+1,1,limit+1,prices,dp),f(ind+1,0,limit,prices,dp));
    }
    int maxProfit(vector<int>& prices) {
    n=prices.size();
    vector<vector<vector<int>>> dp(n, vector<vector<int>>(2, vector<int>(4, -1)));
    return f(0,1,0,prices,dp);

    }
};

//TABULATION 

class Solution {
public:
    int n;
    int maxProfit(vector<int>& prices) {
    n=prices.size();
    vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(2, vector<int>(3, 0)));
    for(int ind=n-1;ind>=0;ind--){
        for(int buy=0;buy<2;buy++){
            for(int limit=0;limit<2;limit++){
                if(buy)dp[ind][buy][limit]=max(-prices[ind]+dp[ind+1][0][limit],dp[ind+1][1][limit]);
                else dp[ind][buy][limit]=max(prices[ind]+dp[ind+1][1][limit+1],dp[ind+1][0][limit]);
            }
        }
    }
    return dp[0][1][0];

    }
};

//SPACE OPTIMIZATION 

class Solution {
public:
    int n;
    int maxProfit(vector<int>& prices) {
    n=prices.size();
    vector<vector<int>>prev(2, vector<int>(3, 0));
    for(int ind=n-1;ind>=0;ind--){
        vector<vector<int>>curr(2, vector<int>(3, 0));
        for(int buy=0;buy<2;buy++){
            for(int limit=0;limit<2;limit++){
                if(buy)curr[buy][limit]=max(-prices[ind]+prev[0][limit],prev[1][limit]);
                else curr[buy][limit]=max(prices[ind]+prev[1][limit+1],prev[0][limit]);
            }
        }prev=curr;
    }
    return prev[1][0];

    }
};
