//MEMOIZATION *********************************************************************

class Solution {
  public:
  int MOD=1e9+7;
	int f(int ind,int target,vector<int>&arr,vector<vector<int>>&dp,int n){
	    if(ind==n-1){
	        if(target==0 && arr[ind]==0)return 2;
	        if(target==0 ||arr[ind]==target)return 1;
	        return 0;
	    }
	    if(ind>=n)return 0;
	    if(dp[ind][target]!=-1)return dp[ind][target];
	    int not_take=f(ind+1,target,arr,dp,n)%MOD;
	    int take=(target>=arr[ind])?f(ind+1,target-arr[ind],arr,dp,n)%MOD:0;
	    return dp[ind][target]=(take+not_take)%MOD;
	}
    int countPartitions(int n, int d, vector<int>& arr) {
        // Code here
        int total=accumulate(arr.begin(),arr.end(),0);
        int target=total+d;
        if(target&1)return false;
        target/=2;
        vector<vector<int>>dp(n,vector<int>(target+1,-1));
        return f(0,target,arr,dp,n)%MOD;
    }
};

//TABULATION ****************************************************************
class Solution {
  public:
  int MOD=1e9+7;
	
    int countPartitions(int n, int d, vector<int>& arr) {
        int total=accumulate(arr.begin(),arr.end(),0);
        int target=total+d;
        if(target&1)return false;
        target/=2;
        vector<vector<int>>dp(n,vector<int>(target+1,0));
        dp[n-1][0]=1;
        if(arr[n-1]<=target)dp[n-1][arr[n-1]]=1;
        if(arr[n-1]==0)dp[n-1][0]=2;
        
        for(int ind=n-2;ind>=0;ind--){
            for(int tar=0;tar<=target;tar++){
                int not_take=dp[ind+1][tar]%MOD;
                int take=(tar>=arr[ind])?dp[ind+1][tar-arr[ind]]%MOD:0;
                dp[ind][tar]=(take+not_take)%MOD;
            }
        }
        return dp[0][target];
    }
};

//SPACE OPTIMIZATION ********************************************************

class Solution {
  public:
  int MOD=1e9+7;
	
    int countPartitions(int n, int d, vector<int>& arr) {
        int total=accumulate(arr.begin(),arr.end(),0);
        int target=total+d;
        if(target&1)return false;
        target/=2;
       vector<int>prev(target+1,0);
        prev[0]=1;
        if(arr[n-1]<=target)prev[arr[n-1]]=1;
        if(arr[n-1]==0)prev[0]=2;
        
        for(int ind=n-2;ind>=0;ind--){
            vector<int>curr(target+1,0);
            for(int tar=0;tar<=target;tar++){
                int not_take=prev[tar]%MOD;
                int take=(tar>=arr[ind])?prev[tar-arr[ind]]%MOD:0;
                curr[tar]=(take+not_take)%MOD;
            }
            prev=curr;
        }
        return prev[target];
    }
};
