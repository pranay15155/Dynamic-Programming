//MEMOISATION 

class Solution {
public:
int n;
    int f(int ind,int buy,vector<int>& prices,vector<vector<int>>&dp){
        if(ind>=n)return 0;
        if(dp[ind][buy]!=-1)return dp[ind][buy];
        int ans=0;
        if(buy){
            ans=max(-prices[ind]+f(ind+1,0,prices,dp),f(ind+1,1,prices,dp));
        }
        else ans=max(prices[ind]+f(ind+2,1,prices,dp),f(ind+1,0,prices,dp));
        return dp[ind][buy]=ans;
    }
    int maxProfit(vector<int>& prices) {
        n=prices.size();
        vector<vector<int>>dp(n,vector<int>(2,-1));
        return f(0,1,prices,dp);
    }
};

//TABULATION 

class Solution {
public:
int n;
    int maxProfit(vector<int>& prices) {
         n=prices.size();
        vector<vector<int>>dp(n+2,vector<int>(2,0));
        for(int ind=n-1;ind>=0;ind--){
            for(int buy=0;buy<2;buy++){
                if(buy){
                    dp[ind][buy]=max(-prices[ind]+dp[ind+1][0],dp[ind+1][1]);
                }
                else dp[ind][buy]=max(prices[ind]+dp[ind+2][1],dp[ind+1][0]);
            }
        }
        return dp[0][1];
    }
};


