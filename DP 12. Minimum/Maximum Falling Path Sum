//MEMOIZATION ********************************************************************************************************

class Solution {
public:
    int n, m;
    int f(int row, int col, vector<vector<int>>& grid,vector<vector<int>>& dp) {
        if (row >= n || col >= m || col<0)return 1e8;
        if (row == n - 1)return grid[n - 1][col];
        if (dp[row][col] != 1000005)return dp[row][col];
        int down_right = f(row+1, col + 1, grid, dp);
        int down = f(row + 1, col, grid, dp);
        int down_left = f(row+1, col -1 , grid, dp);
        return dp[row][col] = grid[row][col] +min(down, min(down_right, down_left));
    }
    int minFallingPathSum(vector<vector<int>>& grid) {
        n = grid.size();
        m = grid[0].size();
        vector<vector<int>> dp(n, vector<int>(m, 1000005));
        int ans=1e8;
        for(int i=0;i<m;i++){
            ans=min(ans,f(0,i,grid,dp));
        }
        return ans;
    }
};

//TABULATION *********************************************************************************************************

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> dp(n, vector<int>(m, 1000005));
        for(int row=n-1;row>=0;row--){
            for(int col=m-1;col>=0;col--){
                 if(row==n-1){
                    dp[row][col]=grid[row][col];
                    continue;
                 }
                 int down=dp[row+1][col];
                 int down_right=(col+1<=m-1)?dp[row+1][col+1]:1e8;
                 int down_left=(col-1>=0)?dp[row+1][col-1]:1e8;
                 dp[row][col]=grid[row][col]+min(down,min(down_left,down_right));
            }
        }
        int ans=1e8;
        for(int col=0;col<n;col++){
            ans=min(ans,dp[0][col]);
        }
        return ans;
    }
};

//SPACE OPTIMIZATION *************************************************************************************************************

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<int>prev(m, 1000005);
        for(int row=n-1;row>=0;row--){
            vector<int>curr(m, 1000005);
            for(int col=m-1;col>=0;col--){
                 if(row==n-1){
                    curr[col]=grid[row][col];
                    continue;
                 }
                 int down=prev[col];
                 int down_right=(col+1<=m-1)?prev[col+1]:1e8;
                 int down_left=(col-1>=0)?prev[col-1]:1e8;
                 curr[col]=grid[row][col]+min(down,min(down_left,down_right));
            }
            prev=curr;
        }
        int ans=1e8;
        for(int col=0;col<n;col++){
            ans=min(ans,prev[col]);
        }
        return ans;
    }
};
